{"version":3,"sources":["../source/lodge.js"],"names":["window","lodge","embedded","eventlist","get","lightbox","loaded","id","options","parent","path","scripts","storage","templates","_constructor","vv","script","document","querySelector","src","substr","length","JSON","parse","getAttribute","replace","error","_findEmbeds","qs","location","search","substring","params","t","q","split","i","decodeURIComponent","debug","show","self","top","noembed","styles","addClass","el","documentElement","className","_initEmbed","overlay","imgTest","querySelectorAll","lightboxvideo","getScript","url","addEventListener","e","embeds","allowed","indexOf","origin","_handleMessage","href","slice","join","create","Date","now","_drawQueuedEmbeds","out","message","obj","events","fire","type","data","tags","Array","prototype","call","forEach","style","height","visibility","alt","css","hasClass","forwardquery","target","elementQueue","embed","lodgelocation","cssoverride","injectCSS","important","fixedsize","embedheight","measure","scrollheight","setInterval","h","msg","routing","addclass","handler","begincheckout","require","injectcss","overlayhide","overlayreveal","overlaysetloading","removeclass","resize","swapclasses","lodgeMessage","source","all","contentWindow","_source","splitHandler","handlerFunction","pop","route","callback","localonly","getTemplate","templateName","successCallback","loadCSS","ajax","jsonp","json","template","remoteCallback","test","push","head","getElementsByTagName","createElement","done","onload","onreadystatechange","readyState","parentNode","removeChild","insertBefore","firstChild","currentNode","targetNode","iframeParams","embedNode","a","innerHTML","appendChild","reveal","innerContent","embedRequest","preventDefault","iframe","buildIframe","tagName","embedURL","originlocation","encodeURIComponent","protocol","hostname","port","getTime","width","border","overflow","display","scrolling","includes","getById","store","main","logo","name","icon","console","groupCollapsed","log","queued","o","groupEnd","send","postString","method","xhr","XMLHttpRequest","open","setRequestHeader","status","responseText","s","setAttribute","encodeForm","form","querystring","elements","checked","value","encodeURI","eventName","addListener","removeEventListener","removeListener","dispatchEvent","dispatch","echoTarget","relay","postMessage","stringify","createEvent","initCustomEvent","verb","targetOrigin","hasOwnProperty","idx","splice","viewport","x","innerWidth","body","offsetWidth","y","innerHeight","offsetHeight","Math","max","db","de","scrollHeight","clientHeight","validate","email","address","toLowerCase","content","close","loadingContent","callbacks","setLoading","loadString","toString","showLoading","key","hide","buttons","buttonTrue","buttonFalse","dataset","queryName","srcEmbed","modal","buttonText","textContent","len","removeClass","wrapClass","positioning","wrapper","modal0","modal1","opacity","getComputedStyle","resolveElement","rel","swapClasses","oldClass","newClass","prompt","context","button","output"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-underscore-dangle */\n\n/** *************************************************************************************\n *\n * △△ lodge\n * @version 0.9\n *\n * @link http://lodge.glitch.me/\n *\n * @license MIT\n * Copyright (c) 2021, Substation\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n ************************************************************************************** */\n\n// Only run the init() script (end of function) if lodge hasn't already been created.\nif (!window.lodge) {\n  /** *************************************************************************************\n   *\n   * △△ lodge {object}\n   * Everything we need to create embed iframes\n   *\n   ************************************************************************************** */\n  window.lodge = (function lodge() {\n    // eslint-disable-next-line no-shadow\n    const lodge = {\n      embedded: false,\n      eventlist: {},\n      get: {},\n      lightbox: false,\n      loaded: false,\n      id: \"\",\n      options: \"\",\n      parent: \"\",\n      path: \"\",\n      scripts: [],\n      storage: {},\n      templates: {},\n\n      /**\n       * /// lodge._constructor()\n       * Runs a few checks, finds embeds, sets up lodge object parameters and defaults.\n       *\n       ********************************************************************************** */\n      // eslint-disable-next-line consistent-return\n      _constructor() {\n        const vv = window.lodge;\n\n        // set path and get all script options\n        // file location and path\n        const script = document.querySelector('script[src$=\"lodge.js\"]');\n        if (script) {\n          // chop off last 9 characters for '/lodge.js' -- not just a replace in case\n          // a directory is actually named 'lodge.js'\n          vv.path = script.src.substr(0, script.src.length - 9);\n          // get and store options\n          try {\n            lodge.options = JSON.parse(\n              `{\"${script\n                .getAttribute(\"data-options\")\n                .replace(/&/g, '\",\"')\n                .replace(/=/g, '\":\"')}\"}`\n            );\n          } catch (error) {\n            lodge.options = \"error\";\n          }\n        }\n\n        // find all <embed> tags with the lodge class (embed.lodge) and process them\n        vv._findEmbeds();\n\n        // look for GET string, parse that shit if we can\n        vv.get.qs = window.location.search.substring(1);\n        vv.get.params = false;\n        if (vv.get.qs) {\n          vv.get.params = {};\n          let t;\n          const q = vv.get.qs.split(\"&\");\n          for (let i = 0; i < q.length; i++) {\n            t = q[i].split(\"=\");\n            vv.get.params[t[0]] = decodeURIComponent(t[1]);\n          }\n        }\n\n        // enable debug if requested\n        if (vv.get.params.debug) {\n          vv.debug.show = true;\n        }\n\n        // if we're running in an iframe assume it's an embed (won't do any harm if not)\n        if (self !== top) {\n          // first check for noembed. if we find it AND we're in an iframe die immediately\n          if (vv.options.noembed) {\n            return false;\n          }\n          vv.styles.addClass({\n            el: document.documentElement,\n            className: \"lodge__embed\",\n          });\n          vv._initEmbed();\n        } else {\n          vv.id = \"lodge main\";\n        }\n\n        // check for ?overlay=1, added when we create an overlay iframe\n        // if found add a class to the main doc for styling.\n        if (vv.get.params.overlay) {\n          vv.styles.addClass({\n            el: document.documentElement,\n            className: \"lodge__embed--overlay\",\n          });\n        }\n\n        // check lightbox options\n        const imgTest = document.querySelectorAll(\n          \"a.lodge.gallery,div.lodge.gallery\"\n        );\n        if (vv.options.lightboxvideo || imgTest.length > 0) {\n          // load lightbox.js\n          vv.getScript({ url: `${vv.path}/lightbox/lightbox.js` });\n        }\n\n        // using messages passed between the request and this script to resize the iframe\n        window.addEventListener(\"message\", function addMessage(e) {\n          // make sure the message comes from our embeds OR the main embedding lodge.js instance (via origin allowed)\n          if (vv.embeds.allowed.indexOf(e.origin) !== -1) {\n            vv._handleMessage(e);\n          }\n        });\n\n        // add current domain to allowed for postmessage calls (regardless of embed or no)\n        vv.embeds.allowed += window.location.href\n          .split(\"/\")\n          .slice(0, 3)\n          .join(\"/\");\n        if (vv.get.params.location) {\n          vv.embeds.allowed += vv.get.params.location\n            .split(\"/\")\n            .slice(0, 3)\n            .join(\"/\");\n        }\n\n        if (!vv.embedded) {\n          // create overlay stuff first\n          vv.overlay.create();\n        }\n        vv.loaded = Date.now(); // ready and loaded\n        // eslint-disable-next-line no-underscore-dangle\n        vv._drawQueuedEmbeds();\n        // log it\n        vv.debug.out({ message: \"finished initializing\", obj: vv });\n        // tell em\n        vv.events.fire({ obj: vv, type: \"ready\", data: vv.loaded });\n      },\n\n      /**\n       * /// lodge._findEmbeds()\n       * Looks for embed.lodge <embed> tags and passes them to embeds.create()\n       *\n       ********************************************************************************** */\n      // eslint-disable-next-line consistent-return\n      _findEmbeds() {\n        // check for element definition in script data-element\n        const tags = document.querySelectorAll(\"embed.lodge\");\n        if (typeof tags === \"object\") {\n          const t = Array.prototype.slice.call(tags);\n          t.forEach(function createFrom(el) {\n            el.style.height = \"1px\";\n            el.style.visibility = \"hidden\";\n            const src = el.getAttribute(\"src\");\n            const alt = el.getAttribute(\"title\");\n            const css = el.getAttribute(\"data-css\");\n            const id = el.getAttribute(\"id\");\n            const overlay = lodge.styles.hasClass({\n              el,\n              className: \"overlay\",\n            });\n            const forwardquery = lodge.styles.hasClass({\n              el,\n              className: \"forwardquery\",\n            });\n            if (src) {\n              lodge.embeds.create({\n                src,\n                alt,\n                target: el,\n                css,\n                id,\n                overlay,\n                forwardquery,\n              });\n            }\n          });\n        }\n      },\n\n      /**\n       * /// lodge._drawQueuedEmbeds()\n       * If embeds.create() is run before lodge is fully loaded (as it is in _findEmbeds())\n       * it queues embeds to be passed to embeds.create() — _drawQueuedEmbeds() finishes\n       * the job if needed.\n       *\n       ********************************************************************************** */\n      _drawQueuedEmbeds() {\n        const vv = window.lodge;\n        if (typeof vv.storage.elementQueue === \"object\") {\n          // this means we've got elements waiting for us...do a\n          // foreach loop and start embedding them\n          vv.storage.elementQueue.forEach(function drawComponent(embed) {\n            // we stored the args in our queue...spit them back out\n            vv.embeds.create(embed);\n          });\n        }\n      },\n\n      /**\n       * /// lodge._initEmbed()\n       * Called when lodge figures out it's running as an embed rather than in the main\n       * window. Sets a few parameters and CSS classes, mesures itself for iframe height\n       * and identifies itself before reporting back up to the main window.\n       *\n       ********************************************************************************** */\n      _initEmbed() {\n        const vv = window.lodge;\n        vv.embedded = true; // set this as an embed\n\n        if (vv.get.params.lodgelocation) {\n          vv.parent = vv.get.params.lodgelocation;\n          vv.embeds.allowed = `${vv.embeds.allowed},${vv.parent}`;\n        }\n\n        if (vv.get.params.id) {\n          vv.id = vv.get.params.id;\n        } else {\n          vv.id = window.location.href;\n        }\n\n        // rewrite CSS stuff?\n        if (vv.get.params.cssoverride) {\n          vv.styles.injectCSS({\n            css: vv.get.params.cssoverride,\n            important: true,\n          });\n        }\n\n        // resize to fit\n        if (!vv.get.params.fixedsize) {\n          vv.storage.embedheight = vv.measure.scrollheight(); // store current height\n          vv.events.fire({\n            obj: vv,\n            type: \"resize\",\n            data: { height: vv.storage.embedheight },\n          }); // fire resize event immediately\n\n          // poll for height and fire resize event if it changes\n          window.setInterval(function resizeIframe() {\n            const h = vv.measure.scrollheight();\n            if (h !== vv.storage.embedheight) {\n              vv.storage.embedheight = h;\n              vv.events.fire({ obj: vv, type: \"resize\", data: { height: h } });\n            }\n          }, 125);\n        }\n      },\n\n      /**\n       * /// lodge._handleMessage()\n       * Takes message type and data, either handling them with a predefined internal\n       * function or firing an event that an external script can listen for and react to.\n       *\n       * @param {object} msg - The message event to be parsed.\n       *\n       ********************************************************************************** */\n      _handleMessage(msg) {\n        const vv = window.lodge;\n        const message = JSON.parse(msg.data);\n        const routing = {\n          /*\n          we'll pass message.data to the handler for each route. requre a script to \n          load/verify it before firing the handler. (in an ideal world these would nest \n          indefinitely, but it's not worth the extra array/reduce load. just a function \n          name at the root of lodge or one object deep. [function] OR [object.function])\n\n          a required lodge script module can be defined, and the handler will be called\n          as a callback once that's loaded.\n          */\n          addclass: { handler: \"styles.addClass\" },\n          begincheckout: {\n            handler: \"checkout.begin\",\n            require: \"checkout/checkout.js\",\n          },\n          injectcss: { handler: \"styles.injectCSS\" },\n          overlayhide: { handler: \"overlay.hide\" },\n          overlayreveal: { handler: \"overlay.reveal\" },\n          overlaysetloading: { handler: \"overlay.setLoading\" },\n          removeclass: { handler: \"styles.removeClass\" },\n          resize: { handler: \"embeds.resize\" },\n          swapclasses: { handler: \"styles.swapClasses\" },\n        };\n        let lodgeMessage = false;\n\n        if (vv.embedded && window.parent === msg.source) {\n          // we're in an embed, so if the message came from the parent it's cool\n          lodgeMessage = true;\n        } else {\n          // not an embed? find the source of the message in our embeds object\n          for (let i = 0; i < vv.embeds.all.length; i++) {\n            if (vv.embeds.all[i].el.contentWindow === msg.source) {\n              lodgeMessage = true;\n              if (!vv.embeds.all[i].el.source) {\n                vv.embeds.all[i].source = msg.source;\n              }\n              message.data._source = vv.embeds.all[i];\n              break;\n            }\n          }\n        }\n\n        // we know it came from lodge, so let's figure out what to do with it\n        if (lodgeMessage) {\n          if (routing[message.type]) {\n            const splitHandler = routing[message.type].handler.split(\".\");\n            const handlerFunction = splitHandler.pop();\n            let route = vv;\n            if (splitHandler.length) {\n              // after popping off the function there's still some handler left, meaning\n              // we've got an object. grabbing the first value and assuming one level deep.\n              route = vv[splitHandler[0]];\n            }\n\n            // we have a recognized type with a lodge handler\n            if (!routing[message.type].require) {\n              // no script dependency, so call the handler and pass the message data\n              route[handlerFunction](message.data);\n            } else {\n              // there's a script dependency — load the script and set a callback\n              // (if script is already loaded, getScript will check and immediately do callback)\n              vv.getScript({\n                url: `${vv.path}/${routing[message.type].require}`,\n                callback: function beginCheckout() {\n                  route[handlerFunction](message.data);\n                },\n              });\n            }\n          } else if (message.type !== \"ready\") {\n            // for anything else, we fire the event through the stack of embeds\n            // (we do NOT fire for \"ready\" because we don't want to falsely trigger ready events)\n            vv.events.fire({\n              obj: vv,\n              type: message.type,\n              data: message.data,\n              target: false,\n              localonly: true,\n            });\n          }\n        }\n      },\n\n      /**\n       * /// lodge.getTemplate()\n       * Loads a view template and coressponding CSS from the templates folder.\n       *\n       * @param {object} template\n       * @param {string} template.templateName - The name of the template as it appears in the templates/ folder (minus the \".js\").\n       * @param {function} template.successCallback - A callback function that will fire after the template has been fully loaded.\n       * @param {boolean} [template.loadCSS=true] - Should we look for and load the matching CSS file?\n       *\n       ********************************************************************************** */\n      getTemplate({ templateName, successCallback, loadCSS = true }) {\n        const vv = window.lodge;\n        const { templates } = vv;\n        if (templates[templateName] !== undefined) {\n          successCallback(templates[templateName]);\n        } else {\n          // get the template\n          this.ajax.jsonp({\n            url: `${vv.path}/templates/${templateName}.js`,\n            callback: function templateLoaded(json) {\n              templates[templateName] = json.template;\n              successCallback(json.template);\n            },\n            remoteCallback: `_${templateName}Callback`,\n          });\n\n          if (loadCSS) {\n            // check for existence of the CSS file and if not found, include it\n            const test = document.querySelectorAll(\n              `link[href=\"${vv.path}/templates/${templateName}.css\"]`\n            );\n            if (!test.length) {\n              // if found\n              vv.styles.injectCSS({\n                css: `${vv.path}/templates/${templateName}.css`,\n              });\n            }\n          }\n        }\n      },\n\n      /**\n       * /// lodge.getScript()\n       * Largely lifted from jQuery, this function loads an external script into the DOM.\n       * Lodge uses it primarily to load sub-modules — since they're same-origin we can\n       * load them safely.\n       *\n       * @param {string} url - The script location.\n       * @param {function} successCallback - A callback function that will fire after the script has been fully loaded.\n       *\n       ********************************************************************************** */\n      getScript({ url, callback }) {\n        const vv = window.lodge;\n        if (vv.scripts.indexOf(url) > -1) {\n          if (typeof callback === \"function\") {\n            callback();\n          }\n        } else {\n          vv.scripts.push(url);\n          const head =\n            document.getElementsByTagName(\"head\")[0] ||\n            document.documentElement;\n          const script = document.createElement(\"script\");\n          script.src = url;\n\n          // Handle Script loading\n          let done = false;\n\n          // Attach handlers for all browsers\n          // eslint-disable-next-line no-multi-assign\n          script.onload = script.onreadystatechange = function attachHandlers() {\n            if (\n              !done &&\n              (!this.readyState ||\n                this.readyState === \"loaded\" ||\n                this.readyState === \"complete\")\n            ) {\n              done = true;\n              if (typeof callback === \"function\") {\n                callback();\n              }\n\n              // Handle memory leak in IE\n              // eslint-disable-next-line no-multi-assign\n              script.onload = script.onreadystatechange = null;\n              if (head && script.parentNode) {\n                head.removeChild(script);\n              }\n            }\n          };\n          head.insertBefore(script, head.firstChild);\n        }\n        // log it\n        vv.debug.out({ message: `loaded script: ${url}` });\n      },\n\n      /** *************************************************************************************\n       *\n       * /// lodge.embeds {object}\n       * Everything we need to create embed iframes\n       *\n       ************************************************************************************** */\n      embeds: {\n        allowed: \"\",\n        all: [],\n\n        /**\n         * /// lodge.embeds.create\n         * Formats and injects an iframe into the DOM\n         *\n         * @param {object} component\n         * @param {string} component.src - The URL or relative link for the iframe source.\n         * @param {string} [component.alt=open] - Taken from an embed's title parameter, this is used as link text for opening a modal component.\n         * @param {object|string} component.target - A target DOM element used for location of the embed or open link (for modal components.) If a string is passed rather than a true DOM element it will be tested with queryselector.\n         * @param {string} [component.css] - CSS override passed to the iframe, expecting a lodge-powered component.\n         * @param {string} component.id - Taken from the embed id, this id will be used for the new iframe. The embed tag will be removed from the DOM, removing conflict.\n         * @param {boolean} [component.overlay=false] - Open the component in an overlay, generating an open link in place of the embed element.\n         * @param {boolean} [component.forwardquery=false] - If true, all current querystring parameters are passed to the underlying embed's iframe.\n         *\n         ************************************************************************************ */\n        create({\n          src,\n          alt = \"open\",\n          target,\n          css,\n          id,\n          overlay = false,\n          forwardquery = false,\n        }) {\n          const vv = window.lodge;\n          let currentNode;\n\n          if (!vv.loaded) {\n            // cheap/fast queue waiting on load.\n            if (typeof vv.storage.elementQueue !== \"object\") {\n              vv.storage.elementQueue = [];\n            }\n            // eslint-disable-next-line prefer-rest-params\n            vv.storage.elementQueue.push({\n              src,\n              alt,\n              target,\n              css,\n              id,\n              overlay,\n              forwardquery,\n            });\n          } else {\n            if (typeof targetNode === \"string\") {\n              // for AJAX, specify target node: '#id', '#id .class', etc. NEEDS to be specific\n              currentNode = document.querySelector(target);\n            } else {\n              currentNode = target;\n            }\n\n            // be nice neighbors. if we can't find currentNode, don't do the rest or pitch errors. silently fail.\n            if (currentNode) {\n              const iframeParams = {\n                src,\n                css,\n                overlay,\n                id,\n                forwardquery,\n              };\n\n              if (overlay) {\n                // create a span to contain the overlay link\n                const embedNode = document.createElement(\"span\");\n                embedNode.className = \"lodge__overlay-open\";\n\n                // open in an overlay with a link in the target div\n                vv.overlay.create(function addMarkup() {\n                  const a = document.createElement(\"a\");\n                  a.href = \"\";\n                  a.target = \"_blank\";\n                  a.innerHTML = alt;\n                  embedNode.appendChild(a);\n                  currentNode.parentNode.insertBefore(embedNode, currentNode);\n                  (function addEvents() {\n                    a.addEventListener(\"click\", function showIframe(e) {\n                      vv.overlay.reveal({\n                        innerContent: iframeParams,\n                        embedRequest: true,\n                      });\n                      e.preventDefault();\n                    });\n                  })();\n                });\n              } else {\n                // set up the iframe\n                const iframe = vv.embeds.buildIframe(iframeParams);\n                // put the iframe in place\n                currentNode.parentNode.insertBefore(iframe, currentNode);\n              }\n\n              if (currentNode.tagName === \"EMBED\") {\n                currentNode.parentNode.removeChild(currentNode);\n              }\n            }\n          }\n        },\n\n        /**\n         * /// lodge.embeds.buildIframe\n         * Builds the actual iframe DOM element for the embed, setting classes and query\n         * strings that will tell the embed's lodge instance more about expectations for it.\n         *\n         * @param {object} component\n         * @param {string} component.src - The URL or relative link for the iframe source.\n         * @param {string} [component.css] - CSS override passed to the iframe via querystring.\n         * @param {string} component.id - Taken from the embed id, this id will be used for the new iframe.\n         * @param {boolean} [component.overlay=false] - If true, a modal flag is set to tell the underlying iframe's lodge instance it's correctly running as a modal embed.\n         * @param {boolean} [component.forwardquery=false] - If true, all current querystring parameters are passed to the underlying embed's iframe.\n         *\n         * @returns {object} iframe\n         *\n         ************************************************************************************ */\n        buildIframe({ src, css, overlay, id, forwardquery = false }) {\n          const vv = window.lodge;\n          const iframe = document.createElement(\"iframe\");\n          let embedURL = src;\n\n          const originlocation = encodeURIComponent(\n            `${location.protocol}//${location.hostname}${\n              location.port ? `:${location.port}` : \"\"\n            }`\n          );\n          if (!id) {\n            id = `lodge__${new Date().getTime()}`;\n          }\n          embedURL += `?lodgelocation=${originlocation}&id=${id}`;\n          if (css) {\n            embedURL += `&cssoverride=${encodeURIComponent(css)}`;\n          }\n          if (forwardquery) {\n            embedURL += `&${vv.get.qs}`;\n          }\n          if (overlay) {\n            embedURL += \"&overlay=1\";\n          }\n          if (vv.debug.show) {\n            embedURL += `&debug=true`;\n          }\n\n          iframe.src = embedURL;\n          iframe.id = id;\n          iframe.className = \"lodge__embed\";\n          iframe.style.width = \"100%\";\n          iframe.style.height = \"0\"; // if not explicitly set the scrollheight of the document will be wrong\n          iframe.style.border = \"0\";\n          iframe.style.overflow = \"hidden\"; // important for overlays, which flicker scrollbars on open\n          iframe.style.display = \"block\";\n          iframe.scrolling = \"no\"; // programming\n\n          let origin = window.location;\n          if (embedURL.includes(\"://\")) {\n            origin = embedURL.split(\"/\").slice(0, 3).join(\"/\");\n            if (vv.embeds.allowed.indexOf(origin) === -1) {\n              vv.embeds.allowed += `,${origin}`;\n            }\n          }\n          vv.embeds.all.push({\n            id,\n            el: iframe,\n            src,\n            source: null,\n            origin,\n          });\n          vv.debug.out({ message: `building iframe for ${id}` });\n\n          return iframe;\n        },\n\n        /**\n         * /// lodge.embeds.resize\n         * Resizes an iframe's height to match the height from a resize event. This is\n         * handled over event relays from inside the embed (measuring scrollheight) and\n         * passed up to the main window which then calls resize to set the height of the\n         * corresponding iframe, making sure there are no scrollbars.\n         *\n         * @param {object} request\n         * @param {object} request._source - Added automatically to message.data by lodge._handleMessage, the _source param specifies the source of the original message/request.\n         * @param {number} request.height - The scroll height, in pixels, of the iframe's content.\n         *\n         ************************************************************************************ */\n        resize({ _source, height }) {\n          const embed = _source.el;\n          embed.height = height;\n          embed.style.height = `${height}px`; // resize to correct height\n        },\n\n        /**\n         * /// lodge.embeds.getById\n         * Uses a lodge internal id to specify and find a specific embed for targeting.\n         *\n         * @param {string} id - The id of the embed to be returned.\n         *\n         * @returns {object} embed\n         *\n         ************************************************************************************ */\n        getById(id) {\n          const vv = window.lodge;\n          let embed = false;\n          for (let i = 0; i < vv.embeds.all.length; i++) {\n            if (vv.embeds.all[i].id === id) {\n              embed = vv.embeds.all[i];\n              break;\n            }\n          }\n          return embed;\n        },\n      }, /// END lodge.embeds\n\n      /** *************************************************************************************\n       *\n       * /// lodge.debug {object}\n       * Outputs messages and object details to the dev console.\n       *\n       ************************************************************************************** */\n      debug: {\n        show: false, // debug flag set in _constructor by detecting a ?debug=true querystring\n\n        /**\n         * /// lodge.debug.store\n         * Stores debug messages in a queue to be processed later. Used for messages that are\n         * sent beore lodge is fully loaded, or for grouped messages.\n         *\n         * @param {object} debug\n         * @param {object} debug.message - The message to output to the console.\n         * @param {object} debug.obj - An object attachment that will be output along with the message. Allows for more in-depth debugging.\n         *\n         ************************************************************************************ */\n        store({ message, obj }) {\n          // making a debug message queue\n          const vv = window.lodge;\n          if (!vv.storage.debug) {\n            vv.storage.debug = [];\n          }\n          vv.storage.debug.push({ message, obj });\n        },\n\n        /**\n         * /// lodge.debug.out\n         * Outputs debug messages or message groups to the dev console.\n         *\n         * @param {object} debug\n         * @param {object} debug.message - The message to output to the console.\n         * @param {object} debug.obj - An object attachment that will be output along with the message. Allows for more in-depth debugging.\n         *\n         ************************************************************************************ */\n        out({ message, obj }) {\n          const vv = window.lodge;\n\n          // if debug is off just skip all this when called\n          // checking here means we can just call out any time without checks\n          if (vv.debug.show) {\n            if (!vv.loaded) {\n              // not ready? store and exit\n              vv.debug.store({ message, obj });\n              return;\n            }\n\n            const styles = {\n              main: {\n                logo: \"color:#093;font-weight:bold;\",\n                name: \"color:#093;font-weight:bold;\",\n                message: \"font-weight:normal;\",\n              },\n              embed: {\n                logo: \"color:#69f;font-weight:bold;\",\n                name: \"color:#69f;font-weight:bold;\",\n                message: \"font-weight:normal;\",\n              },\n            };\n            let type = \"main\";\n            let icon = \"△△\";\n            if (vv.embedded) {\n              type = \"embed\";\n              icon = \"▽▽\";\n            }\n\n            if (!vv.storage.debug) {\n              // no queue: just spit out the message and (optionally) object\n              if (obj) {\n                console.log(\n                  `%c${icon}%c ${vv.id}:%c\\n   ${message} %O`,\n                  styles[type].logo,\n                  styles[type].name,\n                  styles[type].message,\n                  obj\n                );\n              } else {\n                console.log(\n                  `%c${icon}%c ${vv.id}:%c\\n   ${message}`,\n                  styles[type].logo,\n                  styles[type].name,\n                  styles[type].message\n                );\n              }\n            } else {\n              // queue: run through all of it as part of a collapsed group\n              console.groupCollapsed(\n                `%c${icon}%c ${vv.id}:%c\\n   ${message}`,\n                styles[type].logo,\n                styles[type].name,\n                styles[type].message\n              );\n              if (obj) {\n                console.log(\"   attachment: %O\", obj);\n              }\n              vv.storage.debug.forEach(function logMessages(queued) {\n                if (queued.o) {\n                  console.log(`   ${queued.message} %O`, queued.obj);\n                } else {\n                  console.log(`   ${queued.message}`);\n                }\n              });\n              console.groupEnd();\n              // now clear the debug queue\n              delete vv.storage.debug;\n            }\n          }\n        },\n      }, /// END lodge.debug\n\n      /** *************************************************************************************\n       *\n       * /// lodge.ajax {object}\n       * Object wrapping XHR and JSONP calls. Also provides form encoding for POST forms.\n       *\n       ************************************************************************************** */\n      ajax: {\n        /**\n         * /// lodge.ajax.send\n         * Sends a GET or POST request with the response sent to success or failure callback\n         * functions. Passing a postString will force a POST request. Omitting it will result\n         * in a GET request.\n         *\n         * @param {object} xhr\n         * @param {string} xhr.url - The endpoint where we're sending our request.\n         * @param {string} xhr.postString - A POST string (value=1&other=2) from an encoded form that will be sent with the request.\n         * @param {function} xhr.callback - A callback function called with results, using (err, result) footprint\n         *\n         ************************************************************************************ */\n        send({ url, postString = null, callback }) {\n          let method = \"POST\";\n          if (!postString) {\n            method = \"GET\";\n          }\n          const xhr = new XMLHttpRequest();\n          if (xhr) {\n            xhr.open(method, url, true);\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            if (method === \"POST\") {\n              xhr.setRequestHeader(\n                \"Content-type\",\n                \"application/x-www-form-urlencoded\"\n              );\n            }\n            if (typeof callback === \"function\") {\n              xhr.onreadystatechange = function doCallback() {\n                if (xhr.readyState === 4) {\n                  if (xhr.status >= 200 && xhr.status <= 299) {\n                    callback(null, xhr.responseText);\n                  } else {\n                    // testing typof to ensure we've got a callback to call\n                    callback({ error: xhr.responseText }, null);\n                  }\n                }\n              };\n            }\n            xhr.send(postString);\n          }\n        },\n\n        /**\n         * /// lodge.ajax.jsonp\n         * Does a JSONP request for a remote script, which we use primarily to load templates\n         * stored in JSON as scripts we can then use in lodge.\n         *\n         * Boiled down from https://github.com/OscarGodson/JSONP/blob/master/JSONP.js\n         *\n         * @param {object} jsonp\n         * @param {string} jsonp.url - The script URL to be called.\n         * @param {function} jsonp.callback - Our callback function that takes the resulting JSON as an argument.\n         * @param {string} jsonp.remoteCallback - The name of the remote callback function.\n         *\n         ************************************************************************************ */\n        jsonp({ url, callback, remoteCallback = \"callback\" }) {\n          // callback wrapper is a basic function we define as a global under the window object.\n          // it waits to be called by the injected JSONP script and then deletes itself.\n          window[remoteCallback] = function wrapper(json) {\n            callback(json);\n            delete window[remoteCallback];\n          };\n\n          // create a script node and reference the remote callback and local callback\n          const s = document.createElement(\"script\");\n          s.setAttribute(\"src\", url);\n          // add the script node to the DOM\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n        },\n\n        /**\n         * /// lodge.ajax.encodeForm\n         * Takes a form element and *LIKE MAGIC* turns it into a query string. Like magic.\n         *\n         * @param {object} form\n         *\n         ************************************************************************************ */\n        encodeForm(form) {\n          if (typeof form !== \"object\") {\n            return false;\n          }\n          let querystring = \"\";\n          form = form.elements || form; // double check for elements node-list\n          for (let i = 0; i < form.length; i++) {\n            if (form[i].type === \"checkbox\" || form[i].type === \"radio\") {\n              if (form[i].checked) {\n                querystring += `${\n                  (querystring.length ? \"&\" : \"\") + form[i].name\n                }=${form[i].value}`;\n              }\n              // eslint-disable-next-line no-continue\n              continue;\n            }\n            querystring += `${(querystring.length ? \"&\" : \"\") + form[i].name}=${\n              form[i].value\n            }`;\n          }\n          return encodeURI(querystring);\n        },\n      }, /// END lodge.ajax\n\n      /** *************************************************************************************\n       *\n       * /// lodge.events {object}\n       * Give standard .addEventListener footprint to object, fire and relay events through\n       * the chain of embeds\n       *\n       ************************************************************************************** */\n\n      // before the object let's map to standard HTML element event footprints\n      addEventListener(eventName, callback) {\n        const vv = window.lodge;\n        vv.events.addListener(eventName, callback);\n      },\n      removeEventListener(eventName, callback) {\n        const vv = window.lodge;\n        vv.events.removeListener(eventName, callback);\n      },\n      dispatchEvent(e) {\n        const vv = window.lodge;\n        vv.events.dispatch(e);\n      },\n\n      events: {\n        /**\n         * /// lodge.events.fire\n         * Trigger a specific custom event, target it to a specific embed, or use it\n         * specifically as a locals-only event.\n         *\n         * @param {object} event\n         * @param {object} event.obj - The object that will own and fire the event. Event listeners should be tageting this object.\n         * @param {string} event.type - The name of the event.\n         * @param {object|any} [event.data] - The data attached to the event itself. For internal lodge purposes this should be formatted as an object, but for external scripts any data type, including none, is fine.\n         * @param {object|string} [event.target] - A lodge-powered iframe embed, specified either by an internal lodge id or with a direct pointer.\n         * @param {boolean} [event.echoTarget] - Used for an event that happens in the main window / overlay with a targeted embed. Set to true, it will fire the same event simultaneously in the main window and embed.\n         * @param {boolean} [event.localonly] - If called in an embed, do not bubble this event up to the main window.\n         *\n         ************************************************************************************ */\n        fire({\n          obj,\n          type,\n          data = \"\",\n          target,\n          echoTarget = false,\n          localonly = false,\n        }) {\n          const vv = window.lodge;\n          let relay = true;\n          if (target) {\n            // target object found, so push to it via postMessage\n            //\n            // target should be an event object or a lodge embed object\n            // target.origin and target.source should both be real\n            // let's test and ensure we have the right thing\n            if (typeof target === \"string\") {\n              target = vv.embeds.getById(target);\n            } else if (!target.source || !target.origin) {\n              target = false;\n            }\n            if (target) {\n              target.source.postMessage(\n                JSON.stringify({\n                  type,\n                  data,\n                }),\n                target.origin\n              );\n            }\n            // log it\n            vv.debug.out({\n              message: `targeted ${target.id} with ${type} event.`,\n              obj: data,\n            });\n            // set relay to false, since we've already targeted the embed.\n            // this suppresses the usual relay default.\n            relay = false;\n          }\n          if (!target || (target && echoTarget)) {\n            let e = null;\n            // fire the event locally if not targeted\n            // standard\n            e = document.createEvent(\"CustomEvent\");\n            e.initCustomEvent(type, false, false, data);\n            if (vv.embedded && !localonly) {\n              e.relay = relay;\n              e.source = window; // window\n              e.origin = window.location.origin; // url\n            }\n            obj.dispatchEvent(e);\n            if (e.relay) {\n              vv.events.relay({ type, data });\n            }\n            // log it\n            let verb = \"firing \";\n            if (e.relay) {\n              verb = \"relaying \";\n            }\n            vv.debug.out({ message: `${verb + type} event.`, obj: data });\n          }\n        },\n\n        /**\n         * /// lodge.events.relay\n         * Relay an event, via postMessage, up to the main window.\n         *\n         * @param {object} event\n         * @param {string} event.type - The name of the event.\n         * @param {object|any} [event.data] - The data attached to the event itself.\n         *\n         ************************************************************************************ */\n        relay({ type, data }) {\n          const vv = window.lodge;\n          let targetOrigin = \"*\";\n          if (vv.parent) {\n            targetOrigin = vv.parent;\n          }\n          window.parent.postMessage(\n            JSON.stringify({\n              relay: true,\n              type,\n              data,\n            }),\n            targetOrigin\n          );\n        },\n\n        /**\n         * /// lodge.events.addListener\n         * Providing standard event listener add/remove/dispatch footprints for window.lodge\n         *\n         * @param {string} eventName - The name of the event.\n         * @param {function} callback - A callback function.\n         *\n         ************************************************************************************ */\n        addListener(eventName, callback) {\n          const vv = window.lodge;\n          // eslint-disable-next-line no-prototype-builtins\n          if (!vv.eventlist.hasOwnProperty(eventName)) {\n            vv.eventlist[eventName] = [];\n          }\n          vv.eventlist[eventName].push(callback);\n        },\n\n        /**\n         * /// lodge.events.addListener\n         * Providing standard event listener add/remove/dispatch footprints for window.lodge\n         *\n         * @param {string} eventName - The name of the event.\n         * @param {function} callback - A callback function.\n         *\n         ************************************************************************************ */\n        removeListener(eventName, callback) {\n          const vv = window.lodge;\n          // eslint-disable-next-line no-prototype-builtins\n          if (vv.eventlist.hasOwnProperty(eventName)) {\n            const idx = vv.eventlist[eventName].indexOf(callback);\n            if (idx !== -1) {\n              vv.eventlist[eventName].splice(idx, 1);\n            }\n          }\n        },\n\n        /**\n         * /// lodge.events.addListener\n         * Providing standard event listener add/remove/dispatch footprints for window.lodge\n         *\n         * @param {object} e - The event to dispatch.\n         *\n         ************************************************************************************ */\n        dispatch(e) {\n          const vv = window.lodge;\n          // eslint-disable-next-line no-prototype-builtins\n          if (vv.eventlist.hasOwnProperty(e.type)) {\n            let i;\n            for (i = 0; i < vv.eventlist[e.type].length; i++) {\n              if (vv.eventlist[e.type][i]) {\n                vv.eventlist[e.type][i](e);\n              }\n            }\n          }\n        },\n      }, /// END lodge.events\n\n      /** *************************************************************************************\n       *\n       * /// lodge.measure {object}\n       * Basic window/element measurements\n       *\n       ************************************************************************************** */\n      measure: {\n        /**\n         * /// lodge.measure.viewport\n         * Measures width and height for the current viewport size.\n         *\n         * @returns {object} Sets return.x to width (px) and return.y to height (px)\n         *\n         ************************************************************************************ */\n        viewport() {\n          /*\n\t\t\t\t\t\tx: viewport width\n\t\t\t\t\t\ty: viewport height\n\t\t\t\t\t*/\n          return {\n            x: window.innerWidth || document.body.offsetWidth || 0,\n            y: window.innerHeight || document.body.offsetHeight || 0,\n          };\n        },\n\n        /**\n         * /// lodge.measure.scrollheight\n         * Measures The total scroll height of the current window. Used in resizing iframes\n         * to make sure we don't show scrollbars, and takes the largest value of all the\n         * variou ways different browsers measure height.\n         *\n         * @returns {number} height in px\n         *\n         ************************************************************************************ */\n        scrollheight() {\n          // returns scrollable content height\n          const db = document.body;\n          const de = document.documentElement;\n          return Math.max(\n            db.scrollHeight,\n            // de.scrollHeight, // <--- doesn't resize *down* ever, only in here as IE support\n            db.offsetHeight,\n            de.offsetHeight,\n            db.clientHeight\n            // de.clientHeight //  <--- doesn't resize *down* ever, only in here as IE support\n          );\n        },\n      }, /// END lodge.measure\n\n      /** *************************************************************************************\n       *\n       * /// lodge.validate {object}\n       * Email validation, but placeholder object for future needs\n       *\n       ************************************************************************************** */\n      validate: {\n        /**\n         * /// lodge.validate.email\n         * Validates a string against a holy shit level regex to check if it's a valid email\n         * address. Who knows what's in that black magic.\n         *\n         * @param {string} email - The email address to test.\n         *\n         * @returns {boolean} valid or no\n         *\n         ************************************************************************************ */\n        email(address) {\n          // hell no i didn't write this long, bonkers regex\n          // thanks to: https://stackoverflow.com/a/46181\n          // eslint-disable-next-line no-useless-escape\n          const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          return re.test(String(address).toLowerCase());\n        },\n      }, /// END lodge.validate\n\n      /** *************************************************************************************\n       *\n       * /// lodge.overlay {object}\n       * Build, modify, hide, or reveal a consistent modal overlay in the main window and give\n       * all lodge embeds access to it.\n       *\n       ************************************************************************************** */\n      overlay: {\n        content: false,\n        close: false,\n        loadingContent: false,\n        callbacks: [],\n\n        /**\n         * /// lodge.overlay.setLoading\n         * Sets a string (can contain markup) for the loading screen of the overlay. Note:\n         * because this is often called via embed event postMessage the loadString parameter\n         * exists in a deconstructed object even though it is a single parameter. This makes\n         * it easier to pass the event data object straight to this function.\n         *\n         * @param {object} overlay\n         * @param {string} overlay.loadString - The content string for the loading state.\n         *\n         ************************************************************************************ */\n        setLoading({ loadString }) {\n          const vv = window.lodge;\n          vv.overlay.loadingContent = loadString.toString();\n          if (vv.embedded) {\n            vv.events.fire({\n              obj: vv,\n              type: \"overlaysetloading\",\n              data: {\n                loadString: vv.overlay.loadingContent,\n              },\n            });\n          }\n        },\n\n        /**\n         * /// lodge.overlay.showLoading\n         * Displays the loading screen for the overlay. This can be triggered to show a\n         * progress indicator as a component loads templates or if there's an extended action\n         * like an API call.\n         *\n         ************************************************************************************ */\n        showLoading() {\n          const vv = window.lodge;\n          if (vv.overlay.loadingContent) {\n            vv.overlay.reveal({ innerContent: vv.overlay.loadingContent });\n          }\n        },\n\n        /**\n         * /// lodge.overlay.create\n         * Loads the overlay template/CSS and creates necessary DOM elements to go with it.\n         * Called automatically as part of the lodge _constructor setup.\n         *\n         * @param {function} [callback] - Fired once all elements are created and the overlay template/styles have loaded.\n         *\n         ************************************************************************************ */\n        create(callback) {\n          const vv = window.lodge;\n          const self = vv.overlay;\n          // const move = false;\n\n          vv.styles.injectCSS({ css: `${vv.path}/templates/overlay.css` });\n\n          // first we create the overlay div for the whole overlay\n          self.content = document.createElement(\"div\");\n          self.content.className = \"lodge__overlay\";\n          // bind the esc key to hiding the overlay\n          document.addEventListener(\"keyup\", function addKeyup(e) {\n            if (e.key === \"Escape\") {\n              if (self.content.parentNode === document.body) {\n                self.hide();\n              }\n            }\n          });\n          /*\n\t\t\t\t\tself.bg.addEventListener('click', function(e) {\n\t\t\t\t\t\tif(e.target === this) {\n\t\t\t\t\t\t\tself.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t*/\n\n          // now the close button in the corner\n          self.close = document.createElement(\"div\");\n          self.close.className = \"lodge__close\";\n          self.close.addEventListener(\"click\", function addClick() {\n            if (self.content.parentNode === document.body) {\n              self.hide();\n            }\n          });\n\n          // finally OK/Cancel buttons — these basically work\n          // first a container for the buttons\n          self.buttons = document.createElement(\"div\");\n          self.buttons.className = \"lodge__buttons\";\n          // now the actual buttons\n          self.buttonTrue = document.createElement(\"button\");\n          self.buttonTrue.style.display = \"none\";\n          self.buttonFalse = document.createElement(\"button\");\n          self.buttonFalse.style.display = \"none\";\n          // add dataset options (data attributes) to button container\n          self.buttons.dataset.queryName = \"\";\n          self.buttons.dataset.srcEmbed = \"\";\n          // add close events to the buttons, passing true/false\n          self.buttonTrue.addEventListener(\"click\", function addClick(e) {\n            e.preventDefault();\n            vv.events.fire({\n              obj: vv,\n              type: \"modalchoice\",\n              data: {\n                modal: 1,\n                queryName: self.buttons.dataset.queryName,\n                buttonText: self.buttonTrue.textContent,\n              },\n              target: self.buttons.dataset.srcEmbed,\n              echoTarget: true,\n            });\n            // we've announced the modal choice, now we hide the overlay\n            window.lodge.overlay.hide();\n          });\n          self.buttonFalse.addEventListener(\"click\", function addClick(e) {\n            e.preventDefault();\n            vv.events.fire({\n              obj: vv,\n              type: \"modalchoice\",\n              data: {\n                modal: 0,\n                queryName: self.buttons.dataset.queryName,\n                buttonText: self.buttonFalse.textContent,\n              },\n              target: self.buttons.dataset.srcEmbed,\n              echoTarget: true,\n            });\n            // we've announced the modal choice, now we hide the overlay\n            window.lodge.overlay.hide();\n          });\n\n          self.buttons.appendChild(self.buttonTrue);\n          self.buttons.appendChild(self.buttonFalse);\n\n          if (typeof callback === \"function\") {\n            callback();\n          }\n        },\n\n        /**\n         * /// lodge.overlay.hide\n         * Hides the overlay and unloads content. Also does some CSS class manipulation to\n         * make sure normal page scroll is restored.\n         *\n         * @param {object} overlay\n         * @param {data} overlay.returnData\n         * @param {string} overlay.returnTarget\n         *\n         ************************************************************************************ */\n        // hide({ returnData = null, returnTarget = null }) {\n        hide() {\n          const vv = window.lodge;\n          const self = vv.overlay;\n          const db = document.body;\n          if (vv.embedded) {\n            vv.events.fire({ obj: vv, type: \"overlayhide\" }); // request that the parent hides overlay\n          } else {\n            vv.events.fire({ obj: vv, type: \"overlayhidden\" }); // announce it's been hidden\n\n            // self.content.innerHTML = '';\n            while (self.content.firstChild) {\n              self.content.removeChild(self.content.firstChild);\n            }\n            if (self.close.parentNode === db) db.removeChild(self.close);\n            db.removeChild(self.content);\n\n            // reveal any (if) overlay triggers (for inline text+overlay embeds)\n            const t = document.querySelectorAll(\".lodge__overlaytrigger\");\n            if (t.length > 0) {\n              for (let i = 0, len = t.length; i < len; i++) {\n                t[i].style.visibility = \"visible\";\n              }\n            }\n\n            // hide both buttons\n            self.buttonTrue.style.display = \"none\";\n            self.buttonFalse.style.display = \"none\";\n            // reset button data parameters\n            self.buttons.dataset.queryName = \"\";\n            self.buttons.dataset.srcEmbed = \"\";\n\n            // reenable body scrolling\n            vv.styles.removeClass({\n              el: document.documentElement,\n              className: \"lodge__noscroll\",\n            });\n          }\n        },\n\n        /**\n         * /// lodge.overlay.reveal\n         * Takes content, either DOM nodes or a markup string, and inserts it into the\n         * overlay before making sure the overlay is visible.\n         *\n         * @param {object} overlay\n         * @param {string|object} overlay.innerContent - Either a DOM node tree or string representation of content to be shown in the overlay.\n         * @param {string} [overlay.wrapClass=\"lodge__component\"] - A class name for the wrapper DIV. Allows for easy styling of content shown in the overlay.\n         *\n         ************************************************************************************ */\n        reveal({\n          innerContent,\n          wrapClass = \"lodge__component\",\n          modal = false,\n          buttons = false,\n          embedRequest = false,\n        }) {\n          // add the correct content to the content div\n          const vv = window.lodge;\n          const self = vv.overlay;\n          const db = document.body;\n          const positioning = document.createElement(\"div\");\n          const wrapper = document.createElement(\"div\");\n          if (vv.embedded) {\n            // ask the parent to reveal overlay with contents\n            vv.events.fire({\n              obj: vv,\n              type: \"overlayreveal\",\n              data: {\n                innerContent,\n                wrapClass,\n                modal,\n                buttons,\n                embedRequest,\n              },\n            });\n          } else {\n            // empty the content of the overlay — only needed if it hasn't been closed,\n            // but doesn't hurt anything if it's empty\n            while (self.content.firstChild) {\n              self.content.removeChild(self.content.firstChild);\n            }\n            positioning.className = \"lodge__position\";\n            wrapper.className = wrapClass;\n\n            // check for an embed iframe request in the overlay reveal\n            if (embedRequest) {\n              // set up the iframe\n              const iframeParams = innerContent;\n              innerContent = vv.embeds.buildIframe(iframeParams);\n            }\n\n            if (typeof innerContent === \"string\") {\n              wrapper.innerHTML = innerContent;\n            } else {\n              wrapper.appendChild(innerContent);\n            }\n            positioning.appendChild(wrapper);\n            self.content.appendChild(positioning);\n\n            // disable body scrolling\n            if (\n              !vv.styles.hasClass({\n                el: document.documentElement,\n                className: \"lodge__noscroll\",\n              })\n            ) {\n              vv.styles.addClass({\n                el: document.documentElement,\n                className: \"lodge__noscroll\",\n              });\n            }\n\n            if (!modal) {\n              db.appendChild(self.close);\n            }\n            if (buttons) {\n              if (buttons.modal0) {\n                self.buttonFalse.textContent = buttons.modal0;\n                self.buttonFalse.style.display = \"inline-block\";\n              }\n              if (buttons.modal1) {\n                self.buttonTrue.textContent = buttons.modal1;\n                self.buttonTrue.style.display = \"inline-block\";\n              }\n              // if these are set it's a modal request and needs these params for a proper\n              // modalchoice event to fire in the original embed.\n              if (buttons.queryName)\n                self.buttons.dataset.queryName = buttons.queryName;\n              if (buttons.srcEmbed)\n                self.buttons.dataset.srcEmbed = buttons.srcEmbed;\n              wrapper.appendChild(self.buttons);\n            }\n\n            if (self.content.parentNode !== db) {\n              self.content.style.opacity = 0;\n              db.appendChild(self.content);\n              // force style refresh/redraw on element (dumb fix, older browsers)\n              // eslint-disable-next-line no-unused-expressions\n              window.getComputedStyle(self.content).opacity;\n            }\n            // will initiate fade-in if needed\n            self.content.style.opacity = 1;\n            vv.events.fire({ obj: vv, type: \"overlayrevealed\" }); // broadcast that it's revealed\n          }\n        },\n      }, /// END lodge.overlay\n\n      /** *************************************************************************************\n       *\n       * /// lodge.styles {object}\n       * Add, remove, swap, and check classes for a given DOM element or inject CSS rules into\n       * the main document space.\n       *\n       ************************************************************************************** */\n      styles: {\n        /**\n         * /// lodge.overlay.resolveElement\n         * A mostly internal function that allows a DOM element to be found either by internal\n         * storage reference or using standard DOM querySelector.\n         *\n         * @param {string} el - A pointer to the element — either the internal storage id, prepended with \"storage:\" or a string that can be passed to querySelector.\n         *\n         ************************************************************************************ */\n        resolveElement(el) {\n          if (typeof el === \"string\") {\n            if (el.substr(0, 8) === \"storage:\") {\n              return window.lodge.storage[el.substr(8)];\n            }\n            return document.querySelector(el);\n          }\n          return el;\n        },\n\n        /**\n         * /// lodge.overlay.addClass\n         * Adds a CSS class to a given element.\n         *\n         * @param {object} style\n         * @param {string|object} style.el - A pointer to the element — either the internal storage id, prepended with \"storage:\", a string that can be passed to querySelector, or a pointer to the element itself.\n         * @param {string} style.className - The class name to add to the element.\n         * @param {boolean} [style.top=false] - If top is set to true, addClass will fire an event asking the main window to add a class to a specific element. Primarily used to interact with the overlay.\n         *\n         ************************************************************************************ */\n        addClass({ el, className, top = false }) {\n          const vv = window.lodge;\n          if (top && vv.embedded) {\n            vv.events.fire({\n              obj: vv,\n              type: \"addclass\",\n              data: {\n                el,\n                className,\n              },\n            });\n          } else {\n            el = vv.styles.resolveElement(el);\n            if (el && !vv.styles.hasClass({ el, className })) {\n              el.className = `${el.className} ${className}`;\n            }\n          }\n        },\n\n        /**\n         * /// lodge.overlay.hasClass\n         * Tests if a given element currently has a given class assigned to it.\n         *\n         * @param {object} style\n         * @param {string|object} style.el - A pointer to the element — either the internal storage id, prepended with \"storage:\", a string that can be passed to querySelector, or a pointer to the element itself.\n         * @param {string} style.className - The class name to test.\n         *\n         * @returns {boolean} is class present\n         *\n         ************************************************************************************ */\n        hasClass({ el, className }) {\n          const vv = window.lodge;\n          el = vv.styles.resolveElement(el);\n          return ` ${el.className} `.indexOf(` ${className} `) > -1;\n        },\n\n        /**\n         * /// lodge.overlay.injectCSS\n         * Injects a new <link> or <style> tag into a page, altering styles in the global scope.\n         *\n         * @param {object} style\n         * @param {string} style.css - Either a URL or a string of CSS rules. URL will be auto-detected and set as the rel for a <link> element, where a CSS string will be included in a style tag.\n         * @param {boolean} [style.important=false] - By default, CSS will be added at the top of the <head>, allowing other CSS to take precedence. If important is true the CSS will be injected at the end of <head>, allowing it to be last in the cascade.\n         * @param {boolean} [style.top=false] - If top is set to true, injectCSS will fire an event asking the main window to add the CSS at that level instead of in the embed.\n         *\n         ************************************************************************************ */\n        injectCSS({ css, important = false, top = false }) {\n          const vv = window.lodge;\n          let el;\n          if (top && vv.embedded) {\n            vv.events.fire({\n              obj: vv,\n              type: \"injectcss\",\n              data: {\n                css,\n                important,\n              },\n            });\n          } else {\n            const head =\n              document.getElementsByTagName(\"head\")[0] ||\n              document.documentElement;\n            if (css.substr(0, 4) === \"http\") {\n              // if css starts with \"http\" treat it as an external stylesheet\n              el = document.createElement(\"link\");\n              el.rel = \"stylesheet\";\n              el.href = css;\n            } else {\n              // without the \"http\" wrap css with a style tag\n              el = document.createElement(\"style\");\n              el.innerHTML = css;\n            }\n            el.type = \"text/css\";\n\n            if (important) {\n              // important means we don't need to write !important all over the place\n              // allows for overrides, etc\n              head.appendChild(el);\n            } else {\n              // by injecting the css BEFORE any other style elements it means all\n              // styles can be manually overridden with ease — no !important or similar,\n              // no external files, etc...\n              head.insertBefore(el, head.firstChild);\n            }\n          }\n        },\n\n        /**\n         * /// lodge.overlay.removeClass\n         * Removes a CSS class from a given element.\n         *\n         * @param {object} style\n         * @param {string|object} style.el - A pointer to the element — either the internal storage id, prepended with \"storage:\", a string that can be passed to querySelector, or a pointer to the element itself.\n         * @param {string} style.className - The class name to remove from the element.\n         * @param {boolean} [style.top=false] - If top is set to true, removeClass will fire an event asking the main window to remove a class from a specific element. Primarily used to interact with the overlay.\n         *\n         ************************************************************************************ */\n        removeClass({ el, className, top = false }) {\n          const vv = window.lodge;\n          if (top && vv.embedded) {\n            vv.events.fire({\n              obj: vv,\n              type: \"removeclass\",\n              data: {\n                el,\n                className,\n              },\n            });\n          } else {\n            // extra spaces allow for consistent matching.\n            // the \"replace(/^\\s+/, '').replace(/\\s+$/, '')\" stuff is because .trim() isn't supported on ie8\n            el = vv.styles.resolveElement(el);\n            if (el) {\n              el.className = ` ${el.className} `\n                .replace(` ${className} `, \" \")\n                .replace(/^\\s+/, \"\")\n                .replace(/\\s+$/, \"\");\n            }\n          }\n        },\n\n        /**\n         * /// lodge.overlay.swapClasses\n         * Swaps one class name to another. Think \".visible\" changing to \".hidden\" to trigger states.\n         *\n         * @param {object} style\n         * @param {string|object} style.el - A pointer to the element — either the internal storage id, prepended with \"storage:\", a string that can be passed to querySelector, or a pointer to the element itself.\n         * @param {string} style.oldClass - The class name we're swapping out.\n         * @param {string} style.newClass - The class name we're swapping in.\n         * @param {boolean} [style.top=false] - If top is set to true, swapClasses will fire an event asking the main window to swap classes on a specific element. Primarily used to interact with the overlay.\n         *\n         ************************************************************************************ */\n        swapClasses({ el, oldClass, newClass, top = false }) {\n          const vv = window.lodge;\n          if (top && vv.embedded) {\n            vv.events.fire({\n              obj: vv,\n              type: \"swapclasses\",\n              data: {\n                el,\n                oldClass,\n                newClass,\n              },\n            });\n          } else {\n            // add spaces to ensure we're not doing a partial find/replace,\n            // trim off extra spaces before setting\n            el = vv.styles.resolveElement(el);\n            if (el) {\n              el.className = ` ${el.className} `\n                .replace(` ${oldClass} `, ` ${newClass} `)\n                .replace(/^\\s+/, \"\")\n                .replace(/\\s+$/, \"\");\n            }\n          }\n        },\n      }, /// END lodge.overlay\n\n      /** *************************************************************************************\n       *\n       * /// lodge.prompt {object}\n       * Send a message to the user and prompt for close or input.\n       *\n       ************************************************************************************** */\n      prompt: {\n        /**\n         * /// lodge.prompt.message\n         * Displays a message in the overlay\n         *\n         * @param {object} message\n         * @param {string} message.message - The main message\n         * @param {string} message.context - Context and/or additional details\n         * @param {string} message.button - Text for the close button, default: \"Close\"\n         *\n         ************************************************************************************ */\n        message({ message, context = false, button = \"Close\" }) {\n          const vv = window.lodge;\n          let output = `<h2>${message}</h2>`;\n          let buttons = false;\n          if (context) output += `<p>${context}</p>`;\n          if (button) buttons = { modal0: button, modal1: false };\n          // console.log(buttons);\n          vv.overlay.reveal({\n            innerContent: output,\n            buttons,\n          });\n        },\n\n        /**\n         * /// lodge.prompt.modal\n         * Displays a message requiring a user to choose between two buttons (OK / Cancel)\n         *\n         * @param {object} modal\n         * @param {string} modal.message - The main message / question\n         * @param {string} modal.context - Context and/or additional details\n         * @param {string} modal.buttons - Text for the \"OK\" / \"Cancel\" buttons\n         * @param {string} modal.queryName - Give the modal query a name, for event matching\n         *\n         *\n         ************************************************************************************ */\n        modal({\n          message,\n          context,\n          buttons = { modal0: \"Cancel\", modal1: \"OK\" },\n          queryName = \"\",\n        }) {\n          const vv = window.lodge;\n          buttons.queryName = queryName;\n          buttons.srcEmbed = vv.id;\n          let output = `<h2>${message}</h2>`;\n          if (context) output += `<p>${context}</p>`;\n          vv.overlay.reveal({\n            innerContent: output,\n            modal: true,\n            buttons,\n          });\n          // we could also set up an event listener for modalchoice in the case of an optional\n          // callback parameter. seems smart, but likely a to-do and let's look at it as a\n          // pattern we could extend elsewhere.\n        },\n      }, /// END lodge.prompt\n    }; /// END △△ lodge {object}\n\n    //\n    //\n    //\n    //\n    // now we check if the DOM is loaded and call lodge._constructor() if/when it is.\n    if (document.readyState === \"loading\") {\n      // Loading hasn't finished yet\n      document.addEventListener(\"DOMContentLoaded\", lodge._constructor);\n    } else {\n      lodge._constructor(); // `DOMContentLoaded` has already fired\n    }\n\n    // return the lodge object so it becomes properly set as window.lodge\n    return lodge;\n  })();\n}\n"],"file":"lodge.js"}